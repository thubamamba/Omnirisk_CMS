<% content_for :section_title, "Using Jumpstart Pro iOS & Android with Existing Apps" %>

<p class="text-xl">If you're not using Jumpstart Pro Rails, here are the steps needed to update your web application to work with Jumpstart Pro iOS &amp; Android.</p>

<%= h2_with_anchor "API Endpoints" %>
<p>Your Rails API will be used for authentication and other features.</p>
<p>The host and URL base path are configurable in the iOS / Android app Endpoint configuration. By default, the host is <code>http://localhost:3000</code> and base API uri is <code>/api/v1</code>. You can change this configuration to match your application&#39;s API.</p>
<p>When making requests to the API, you&#39;ll want to follow these rules:</p>
<ul>
  <li>Include <code>Android (Turbo Native)</code> or <code>iOS (Turbo Native)</code> in the User Agent for all API requests. This tells the API the request came from Turbo Native and should be handled accordingly.</li>
  <li>Use the <code>Authorization</code> header to authenticate user with an API token</li>
</ul>

<%= h2_with_anchor "Mobile Views" %>
<p>Some views will need a custom version for Turbo Native. You can use <a href="https://gorails.com/episodes/rails-request-variants">Request Variants</a> to accomplish this.</p>
<p>Hotwire includes a <code>turbo_native_app?</code> helper that checks the <code>User-Agent</code> header for Turbo Native. You can set the request variant for Turbo Native requests using that.</p>
<div class="not-prose">
  <pre class="lang-ruby"><code>before_action do
  request.variant = :phone if turbo_native_app?
end</code></pre>
</div>

<%= h2_with_anchor "Navbar" %>
<p>The iOS / Android app uses a native header so it feels native. We add a hamburger button to this which triggers a Javascript event using the Turbo Bridge.</p>
<p>In Rails, you&#39;ll want to hide your navbar on Turbo Native requests. Use a request variant template for this so you can minimize the HTML used for mobile.</p>
<p>The menu should be hidden, but toggles when the <code>toggle-nav-bar</code> event fires. You can create a simple Stimulus Controller to listen to that event and toggle the navbar visibility.</p>

<%= h2_with_anchor "Turbo Bridge" %>
<p>The Turbo Bridge is how your iOS / Android app and Javascript talk to each other. Add this to your Javascript. We&#39;re using Webpacker, but you can probably use this in the asset pipeline as well, it just might take a few small tweaks.</p>
<div class="not-prose">
  <pre><code class="lang-javascript">class Bridge {
  // Toggles navbar visibility in browser from Turbo Native
  static toggleNavBar() {
    const event = new CustomEvent("toggle-nav-bar")
    window.dispatchEvent(event)
  }

  // Sends a message to the native app, if active.
  static postMessage(name, data = {}) {
    // iOS
    window.webkit?.messageHandlers?.nativeApp?.postMessage({name, ...data})

    // Android
    window.nativeApp?.postMessage(JSON.stringify({name, ...data}))
  }
}

// Expose this on the window object so TurboNative can interact with it</span>
window</span>.TurboNativeBridge = Bridge
export</span> <span class="hljs-keyword">default</span> Bridge</code></pre>
</div>

<%= h2_with_anchor "Authentication" %>
<p>Authentication requires an API endpoint that accepts <code>email</code> and <code>password</code> params.</p>
<p>It should:</p>
<ul>
  <li>Respond to <code>POST /api/v1/auth</code></li>
  <li>Validate the email and password</li>
  <li>Sign the user in (with cookies)</li>
  <li>Find or create an API token for the user</li>
  <li>Return a 200 OK JSON response with:<ul>
      <li><code>token</code> - the API token for the iOS / Android device to make API requests</li>
    </ul>
  </li>
</ul>
<p>Successful authentication will refresh the currently visible page.</p>

<%= h2_with_anchor "Sign out" %>
<p>Sign out must happen on the iOS / Android app side. That way we can delete the API token, make an API request to remove the NotificationToken, and clear cookies in the WebView.</p>
<p>To intercept the Sign out link in the HTML, use the following Javascript:</p>
<div class="not-prose">
  <pre><code class="lang-javascript">import { Controller } from "stimulus"

export default class extends Controller {
  signOut(event) {
    if (this._isTurboNativeApp) {
      event.preventDefault()
      event.stopImmediatePropagation()
      window.TurboNativeBridge.postMessage("signOut")
    }
  }

  get _isTurboNativeApp() {
    return navigator.userAgent.indexOf("Turbo Native") !== -1
  }
}</code></pre>
</div>

<p>The API endpoint for Sign out needs to do two things:</p>
<ul>
  <li>Respond to <code>DELETE /api/v1/auth</code></li>
  <li>Delete the NotificationToken</li>
  <li>Sign out the current user (removing cookies)</li>
  <li>Returns a 200 OK response</li>
</ul>

<%= h2_with_anchor "Update Password" %>
<p>Changing your password is a simple API request</p>
<p><code>PATCH /api/v1/password</code></p>
<p>Headers:</p>
<ul>
  <li><code>Authorization</code> - The user&#39;s API token</li>
</ul>
<p>Params:</p>
<ul>
  <li><code>user[current_password]</code> - The user&#39;s current password</li>
  <li><code>user[password]</code> - The new password</li>
  <li><code>user[password_confirmation]</code> - The new password</li>
</ul>
<p>Returns:</p>
<p>Success - 200 OK</p>
<div class="not-prose">
  <pre><code class="lang-json">{ success: true }</code></pre>
</div>
<p>Failure - 422 Unprocessable Entity</p>
<div class="not-prose">
  <pre><code class="lang-json">{ error: "Password confirmation did not match" }</code></pre>
</div>

<%= h2_with_anchor "Push Notifications" %>
<p>Registering for Push Notifications happens when the user is signed in.</p>
<p>The Backend needs NotificationToken model to store the token and platform for push notifications.</p>
<div class="not-prose">
  <pre><code class="lang-bash">rails g model NotificationToken user:belongs_to <span class="hljs-built_in">platform</span> <span class="hljs-keyword">token</span></code></pre>
</div>

<p>An API endpoint for notification tokens should:</p>
<ul>
  <li>Respond to <code>POST /api/v1/notification_tokens</code></li>
  <li>Use <code>Authorization</code> header to authenticate user with API token</li>
  <li>Accept params:<ul>
      <li><code>token</code> - device notification token</li>
      <li><code>platform</code> - platform of device (iOS, fcm). "fcm" is Firebase Cloud Messaging which is used for Android.</li>
    </ul>
  </li>
  <li>Find or create NotificationToken record for user with params</li>
  <li>Return 200 OK if successful</li>
</ul>
